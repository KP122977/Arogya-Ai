# import os
# import joblib
# import numpy as np
# import pandas as pd
# from django.conf import settings
# from rest_framework.decorators import api_view
# from rest_framework.response import Response
# from rest_framework import status
# import google.generativeai as genai
# from dotenv import load_dotenv
# import logging

# # Load environment variables
# load_dotenv()

# # Configure logging
# logger = logging.getLogger(__name__)

# # Configure Gemini API key securely
# GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# if not GEMINI_API_KEY:
#     raise ValueError("GEMINI_API_KEY is not set in environment variables.")
# genai.configure(api_key=GEMINI_API_KEY)

# # Load model data
# BASE_DIR = settings.BASE_DIR
# model_data = joblib.load(os.path.join(BASE_DIR, "model", "disease_model.pkl"))
# if isinstance(model_data, dict):
#     model = model_data["model"]
#     encoder = model_data["encoder"]
#     label_encoder = model_data["label_encoder"]
# else:
#     raise TypeError("Loaded model_data is neither dict nor list")
# # @api_view(["POST"])
# # def predict_disease(request):
# #     try:
# #         data = request.data
# #         symptoms_dict = data.get("symptoms", {})

# #         if not isinstance(symptoms_dict, dict) or not symptoms_dict:
# #             return Response({"error": "Invalid or missing symptoms format"}, status=400)

# #         # Create input vector
# #         input_vector = [symptoms_dict.get(symptom, 0) for symptom in symptom_list]
# #         input_df = pd.DataFrame([input_vector], columns=symptom_list)

# #         # Predict
# #         prediction_proba = model.predict_proba(input_df)[0]
# #         top_indices = np.argsort(prediction_proba)[::-1][:3]

# #         top_predictions = [
# #             {
# #                 "disease": encoder.inverse_transform([i])[0],
# #                 "probability": float(prediction_proba[i])
# #             }
# #             for i in top_indices
# #         ]

# #         return Response({
# #             "predictions": top_predictions,
# #             "model_accuracy": round(accuracy * 100, 2) if accuracy is not None else None
# #         })

# #     except Exception as e:
# #         logger.error("Prediction error: %s", e)
# #         return Response(
# #             {"error": "Something went wrong while predicting disease."},
# #             status=status.HTTP_500_INTERNAL_SERVER_ERROR
# #         )
# @api_view(['POST'])
# def predict_disease(request):
#     selected_symptoms = request.data.get("symptoms", [])

#     input_data = {symptom: [1 if symptom in selected_symptoms else 0] for symptom in symptom_list}
#     input_df = pd.DataFrame(input_data)

#     prediction = model.predict(input_df)[0]
#     probabilities = model.predict_proba(input_df)[0]
#     confidence = round(max(probabilities) * 100, 2)

#     return Response({
#         "prediction": prediction,
#         "confidence": confidence
#     })
# @api_view(["POST"])
# def prescribe_disease(request):
#     try:
#         data = request.data
#         disease = data.get("disease", "").strip()

#         if not disease:
#             return Response({"error": "Disease name not provided"}, status=400)

#         # Strict prompt for short prescription
#         prompt = f"""
# You are a professional doctor.

# Write a SHORT prescription for the disease: {disease}

# ⚠️ STRICT INSTRUCTIONS:
# - MAX 4 lines total
# - DO NOT write any explanations, disclaimers, or introductions
# - DO NOT include headings like “Rx”, “Instructions”, “Diagnosis”, etc.
# - Only list medicines, dosage, timing, duration, and short advice
# - Advice MUST be 1-2 short sentences only
# - OUTPUT must look like a real doctor's prescription note, nothing else

# FORMAT STRICTLY:
# - Medicine 1 – <Dosage>, <Timing>
# - Medicine 2 – <Dosage>, <Timing>
# - Duration: X days
# - Advice: <short 1-2 lines only>
# """

#         model = genai.GenerativeModel("gemini-2.5-flash",system_instruction="Respond ONLY with a 4-line prescription in the format of a professional doctor. DO NOT provide explanations, context, or disclaimers under any circumstances.")
#         response = model.generate_content(prompt)

#         if not hasattr(response, "text") or not response.text:
#             return Response({"error": "No content generated by Gemini."}, status=500)

#         # Enforce 5-line output max
#         raw_output = response.text.strip()
#         trimmed_output = "\n".join(raw_output.splitlines()[:5])

#         return Response({"prescription": trimmed_output})

#     except Exception as e:
#         logger.error("Gemini API error: %s", e)
#         return Response(
#             {"error": "Failed to generate prescription. Please try again later."},
#             status=status.HTTP_500_INTERNAL_SERVER_ERROR
#         )


import os
import joblib
import numpy as np
import pandas as pd
from django.conf import settings
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
import google.generativeai as genai
from dotenv import load_dotenv
import logging

# Load environment variables
load_dotenv()

# Configure logging
logger = logging.getLogger(__name__)

# Configure Gemini API key securely
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY is not set in environment variables.")
genai.configure(api_key=GEMINI_API_KEY)

# Load model data
BASE_DIR = settings.BASE_DIR
model_data = joblib.load(os.path.join(BASE_DIR, "model", "disease_model.pkl"))
model_data = joblib.load("model/disease_model.pkl")
model = model_data["model"]
label_encoder = model_data["label_encoder"]
feature_names = model_data["feature_names"]

# Embed symptom list directly (based on your latest CSV training data)
symptom_list = [
     'Fever', 'Fatigue', 'Sweating', 'Chills', 'Weight_Loss', 'Weight_Gain',
    'Cough', 'Runny_Nose', 'Sore_Throat', 'Shortness_of_Breath', 'Chest_Congestion',
    'Nausea', 'Vomiting', 'Diarrhea', 'Abdominal_Pain', 'Loss_of_Appetite',
    'Headache', 'Dizziness', 'Sleep_Disturbance', 'Rash', 'Itching', 'Redness',
    'Swelling', 'Joint_Pain', 'Muscle_Pain', 'Back_Pain', 'Frequent_Urination',
    'Increased_Thirst', 'Dry_Mouth', 'Sneezing'
]

@api_view(["POST"])
def predict_disease(request):
    try:
        selected_symptoms = request.data.get("symptoms", [])
        if not selected_symptoms:
            return Response({"error": "No symptoms provided"}, status=status.HTTP_400_BAD_REQUEST)

       # Create binary input DataFrame with proper feature names
        input_data = [1 if symptom in selected_symptoms else 0 for symptom in feature_names]
        input_df = pd.DataFrame([input_data], columns=feature_names)


        # Make prediction
        prediction = model.predict(input_df)[0]
        confidence_scores = model.predict_proba(input_df)[0]
        confidence = float(np.max(confidence_scores)) * 100

        predicted_disease = label_encoder.inverse_transform([prediction])[0]

        return Response({
            "prediction": predicted_disease,
            "confidence": f"{confidence:.2f}%"
        })

    except Exception as e:
        print(f"Prediction error: {e}")
        return Response({"error": "An error occurred during prediction."}, status=500)

@api_view(["POST"])
def prescribe_disease(request):
    try:
        data = request.data
        disease = data.get("disease", "").strip()

        if not disease:
            return Response({"error": "Disease name not provided"}, status=400)

        prompt = f"""
You are a professional doctor.

Write a SHORT prescription for the disease: {disease}

⚠️ STRICT INSTRUCTIONS:
- MAX 4 lines total
- DO NOT write any explanations, disclaimers, or introductions
- DO NOT include headings like “Rx”, “Instructions”, “Diagnosis”, etc.
- Only list medicines, dosage, timing, duration, and short advice
- Advice MUST be 1-2 short sentences only
- OUTPUT must look like a real doctor's prescription note, nothing else

FORMAT STRICTLY:
- Medicine 1 – <Dosage>, <Timing>
- Medicine 2 – <Dosage>, <Timing>
- Duration: X days
- Advice: <short 1-2 lines only>
"""
        model = genai.GenerativeModel(
            "gemini-2.5-flash",
            system_instruction="Respond ONLY with a 4-line prescription in the format of a professional doctor. DO NOT provide explanations, context, or disclaimers under any circumstances."
        )
        response = model.generate_content(prompt)

        if not hasattr(response, "text") or not response.text:
            return Response({"error": "No content generated by Gemini."}, status=500)

        raw_output = response.text.strip()
        trimmed_output = "\n".join(raw_output.splitlines()[:5])

        return Response({"prescription": trimmed_output})

    except Exception as e:
        logger.error("Gemini API error: %s", e)
        return Response(
            {"error": "Failed to generate prescription. Please try again later."},
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
